[{"/Users/whdlsnw/Projects/chess/src/index.tsx":"1","/Users/whdlsnw/Projects/chess/src/reportWebVitals.ts":"2","/Users/whdlsnw/Projects/chess/src/Board.tsx":"3","/Users/whdlsnw/Projects/chess/src/Cell.tsx":"4","/Users/whdlsnw/Projects/chess/src/enums/PieceType.ts":"5","/Users/whdlsnw/Projects/chess/src/enums/PieceColor.ts":"6","/Users/whdlsnw/Projects/chess/src/chessUtils/boardUtils.ts":"7","/Users/whdlsnw/Projects/chess/src/Piece.tsx":"8","/Users/whdlsnw/Projects/chess/src/chessUtils/MoveLogic.ts":"9","/Users/whdlsnw/Projects/chess/src/chessUtils/PawnMove.ts":"10","/Users/whdlsnw/Projects/chess/src/chessUtils/BoundCheck.ts":"11"},{"size":755,"mtime":1608394086425,"results":"12","hashOfConfig":"13"},{"size":545,"mtime":1608158137974,"results":"14","hashOfConfig":"13"},{"size":2831,"mtime":1608394935666,"results":"15","hashOfConfig":"13"},{"size":2740,"mtime":1608394798370,"results":"16","hashOfConfig":"13"},{"size":247,"mtime":1608281032448,"results":"17","hashOfConfig":"13"},{"size":92,"mtime":1608281029986,"results":"18","hashOfConfig":"13"},{"size":1781,"mtime":1608318512172,"results":"19","hashOfConfig":"13"},{"size":1047,"mtime":1608380175089,"results":"20","hashOfConfig":"13"},{"size":2063,"mtime":1608378825374,"results":"21","hashOfConfig":"13"},{"size":1617,"mtime":1608377059542,"results":"22","hashOfConfig":"13"},{"size":2386,"mtime":1608379370626,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sy282g",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/whdlsnw/Projects/chess/src/index.tsx",[],"/Users/whdlsnw/Projects/chess/src/reportWebVitals.ts",[],[],"/Users/whdlsnw/Projects/chess/src/Board.tsx",["48"],"import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Cell from './Cell';\nimport { PieceType } from './enums/PieceType';\nimport { PieceColor } from './enums/PieceColor';\nimport { Coord, INITIAL_BOARD, movePiece } from './chessUtils/boardUtils';\nimport { isMovePossible } from './chessUtils/MoveLogic';\n\ntype Props = {\n    name: string;\n    size: string;\n};\n\nexport interface CellValue {\n    pieceColor: PieceColor;\n    pieceType: PieceType;\n}\n\nexport interface Move {\n    from: Coord;\n    to: Coord;\n    isCheck: boolean;\n}\n\nfunction move(\n    pieces: CellValue[][],\n    setBoard: React.Dispatch<React.SetStateAction<CellValue[][]>>,\n    setIsWhiteTurn: React.Dispatch<React.SetStateAction<boolean>>,\n    setMoves: React.Dispatch<React.SetStateAction<Move[]>>,\n) {\n    return (from: Coord, to: Coord): void => {\n        setBoard(movePiece(pieces, from, to));\n        setIsWhiteTurn((whiteTurn) => !whiteTurn);\n        setMoves((moves) => [...moves, { from, to, isCheck: false }]);\n    };\n}\n\nfunction canMove(pieces: CellValue[][]) {\n    return (from: Coord, to: Coord): boolean => {\n        return isMovePossible(pieces, from, to);\n    };\n}\n\nconst Board: React.FC<Props> = ({ name, size }: Props) => {\n    const [pieces, setPieces] = useState<CellValue[][]>(INITIAL_BOARD);\n    const [isWhiteTurn, setIsWhiteTurn] = useState(true);\n    const [moves, setMoves] = useState<Move[]>([]);\n\n    return (\n        <Wrapper>\n            <h1>\n                {name} turn {isWhiteTurn ? 'white' : 'black'}\n            </h1>\n            <BoardWrapper fontSize={size}>\n                {pieces.map((row, id) => (\n                    <Row key={id}>\n                        {row.map((cell, idx) => (\n                            <Cell\n                                isWhiteTurn={isWhiteTurn}\n                                isMovePossible={canMove(pieces)}\n                                lastMove={moves[moves.length - 1]}\n                                move={move(pieces, setPieces, setIsWhiteTurn, setMoves)}\n                                key={idx}\n                                rowNumber={id}\n                                columnNumber={idx}\n                                cell={cell}\n                            />\n                        ))}\n                    </Row>\n                ))}\n            </BoardWrapper>\n        </Wrapper>\n    );\n};\n\nexport default Board;\n\nconst Row = styled.div`\n    display: flex;\n`;\n\ntype BoradWrapperProps = {\n    fontSize: string;\n};\n\nconst BoardWrapper = styled.div<BoradWrapperProps>`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    flex: 1;\n    font-size: ${({ fontSize }) => fontSize};\n`;\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    width: 100%;\n`;\n","/Users/whdlsnw/Projects/chess/src/Cell.tsx",[],"/Users/whdlsnw/Projects/chess/src/enums/PieceType.ts",[],"/Users/whdlsnw/Projects/chess/src/enums/PieceColor.ts",[],"/Users/whdlsnw/Projects/chess/src/chessUtils/boardUtils.ts",[],"/Users/whdlsnw/Projects/chess/src/Piece.tsx",[],"/Users/whdlsnw/Projects/chess/src/chessUtils/MoveLogic.ts",[],"/Users/whdlsnw/Projects/chess/src/chessUtils/PawnMove.ts",[],"/Users/whdlsnw/Projects/chess/src/chessUtils/BoundCheck.ts",[],{"ruleId":"49","severity":2,"message":"50","line":48,"column":1,"nodeType":null,"endLine":48,"endColumn":5,"fix":"51"},"prettier/prettier","Delete `路路路路`",{"range":"52","text":"53"},[1418,1422],""]